Functions:
- Functions also hold values like any other variables
- While variables only hold values, Functions can be percieved as actions.
- Only calling function_name gives the source code, but a function call gives the result, i,e:
        function greet(){
            alert('hey jane');
        }

        let welcome = greet  --> welcome holds:
        function greet(){
            alert('hey jane');
        }

        but - let welcome = greet() --> welcome holds - hey jane (result)


1) Function declaration :-
    function func_name(params) {
        statements;
    }

2) Function expressions :-
    let variable = function(){   //Don't need function name
        statements
    };  // semi-colon because this is treated just like a simple assignment expression. e.g: let a = 5;


* Declarations are processed before any code is executed, while expressions are evaluated when the execution reaches them.
* So when js is to be run, it scans the code for all the global and function declarations and that is why function declarations can be accessed
    even before they are written
* But function expressions cause function space to be created only once thy reach the assignment statement.

3) Arrow functions :-
    let func = (arg1, arg2, arg3) => expression;

    **which is equivalent to : let func = function(arg1, arg2, ..., argN) {
                                return expression;
                            };
    e.g: let sum = (a, b) => a + b;

    **If we have only one argument, then parentheses around parameters can be omitted, making that even shorter.
    For example:
    let double = n => n * 2; // roughly the same as: let double = function(n) { return n * 2 }
    alert( double(3) ); // 6

    **If there are no arguments, parentheses are empty, but they must be present:
    let sayHi = () => alert("Hello!");
    sayHi();

    **Multi-line arrow functions :-
      let sum = (a, b) => {  // the curly brace opens a multiline function
        let result = a + b;
        return result; // if we use curly braces, then we need an explicit "return"
      };
      alert( sum(1, 2) ); // 3


